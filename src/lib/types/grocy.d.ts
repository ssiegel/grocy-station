/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/system/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns information about the installed Grocy version, PHP runtime and OS */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An DbChangedTimeResponse object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            grocy_version?: {
                                Version?: string;
                                /** Format: date */
                                ReleaseDate?: string;
                            };
                            php_version?: string;
                            sqlite_version?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/db-changed-time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the time when the database was last changed */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An DbChangedTimeResponse object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DbChangedTimeResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all config settings */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Key/value pairs of config settings */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the current server time */
        get: {
            parameters: {
                query?: {
                    /** @description Offset of timestamp in seconds. Can be positive or negative. */
                    offset?: components["parameters"]["offsettime"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A TimeResponse object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeResponse"];
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/localization-strings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all localization strings (in the by the user desired language) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/log-missing-localization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logs a missing localization string
         * @description Only when MODE == 'dev', so should only be called then
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description A valid MissingLocalizationRequest object */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MissingLocalizationRequest"];
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{entity}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all objects of the given entity */
        get: {
            parameters: {
                query?: {
                    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
                    "query[]"?: components["parameters"]["query"];
                    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
                    order?: components["parameters"]["order"];
                    /** @description The maximum number of objects to return */
                    limit?: components["parameters"]["limit"];
                    /** @description The number of objects to skip */
                    offset?: components["parameters"]["offset"];
                };
                header?: never;
                path: {
                    /** @description A valid entity name */
                    entity: components["schemas"]["ExposedEntity_NotIncludingNotListable"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An entity object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": (components["schemas"]["Product"] | components["schemas"]["Chore"] | components["schemas"]["Battery"] | components["schemas"]["Location"] | components["schemas"]["QuantityUnit"] | components["schemas"]["ShoppingListItem"] | components["schemas"]["StockEntry"] | components["schemas"]["ProductBarcode"])[];
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
                /** @description The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500"];
                    };
                };
            };
        };
        put?: never;
        /** Adds a single object of the given entity */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid entity name */
                    entity: components["schemas"]["ExposedEntity_NotIncludingNotEditable"];
                };
                cookie?: never;
            };
            /** @description A valid entity object of the entity specified in parameter *entity* */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Product"] | components["schemas"]["Chore"] | components["schemas"]["Battery"] | components["schemas"]["Location"] | components["schemas"]["QuantityUnit"] | components["schemas"]["ShoppingListItem"] | components["schemas"]["StockEntry"] | components["schemas"]["ProductBarcode"];
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The id of the created object */
                            created_object_id?: number;
                        };
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{entity}/{objectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a single object of the given entity */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid entity name */
                    entity: components["schemas"]["ExposedEntity_NotIncludingNotListable"];
                    /** @description A valid object id of the given entity */
                    objectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An entity object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Product"] | components["schemas"]["Chore"] | components["schemas"]["Battery"] | components["schemas"]["Location"] | components["schemas"]["QuantityUnit"] | components["schemas"]["ShoppingListItem"] | components["schemas"]["StockEntry"] | components["schemas"]["ProductBarcode"];
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
                /** @description Object not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        /** Edits the given object of the given entity */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid entity name */
                    entity: components["schemas"]["ExposedEntity_NotIncludingNotEditable"];
                    /** @description A valid object id of the given entity */
                    objectId: number;
                };
                cookie?: never;
            };
            /** @description A valid entity object of the entity specified in parameter *entity* */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Product"] | components["schemas"]["Chore"] | components["schemas"]["Battery"] | components["schemas"]["Location"] | components["schemas"]["QuantityUnit"] | components["schemas"]["ShoppingListItem"] | components["schemas"]["StockEntry"] | components["schemas"]["ProductBarcode"];
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a single object of the given entity */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid entity name */
                    entity: components["schemas"]["ExposedEntity_NotIncludingNotDeletable"];
                    /** @description A valid object id of the given entity */
                    objectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userfields/{entity}/{objectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all userfields with their values of the given object of the given entity */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid entity name */
                    entity: components["schemas"]["ExposedEntity_IncludingUserEntities"];
                    /** @description A valid object id of the given entity */
                    objectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Key/value pairs of userfields */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        /** Edits the given userfields of the given object of the given entity */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid entity name */
                    entity: components["schemas"]["ExposedEntity_IncludingUserEntities_NotIncludingNotEditable"];
                    /** @description A valid object id of the given entity */
                    objectId: string;
                };
                cookie?: never;
            };
            /** @description A valid entity object of the entity specified in parameter *entity* */
            requestBody: {
                content: {
                    "application/json": unknown;
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{group}/{fileName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serves the given file
         * @description With proper Content-Type header
         */
        get: {
            parameters: {
                query?: {
                    /** @description Force the file to be served as the given type */
                    force_serve_as?: "picture";
                    /** @description Only when using `force_serve_as` = `picture`: Downscale the picture to the given height while maintaining the aspect ratio */
                    best_fit_height?: number;
                    /** @description Only when using `force_serve_as` = `picture`: Downscale the picture to the given width while maintaining the aspect ratio */
                    best_fit_width?: number;
                };
                header?: never;
                path: {
                    /** @description The file group */
                    group: components["schemas"]["FileGroups"];
                    /** @description The file name (including extension)<br>**BASE64 encoded** */
                    fileName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The binary file contents (Content-Type header is automatically set based on the file type) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        /**
         * Uploads a single file
         * @description The file will be stored at /data/storage/{group}/{file_name} (you need to remember the group and file name to get or delete it again)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The file group */
                    group: components["schemas"]["FileGroups"];
                    /** @description The file name (including extension)<br>**BASE64 encoded** */
                    fileName: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/octet-stream": string;
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes the given file */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The file group */
                    group: components["schemas"]["FileGroups"];
                    /** @description The file name (including extension)<br>**BASE64 encoded** */
                    fileName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all users */
        get: {
            parameters: {
                query?: {
                    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
                    "query[]"?: components["parameters"]["query"];
                    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
                    order?: components["parameters"]["order"];
                    /** @description The maximum number of objects to return */
                    limit?: components["parameters"]["limit"];
                    /** @description The number of objects to skip */
                    offset?: components["parameters"]["offset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of user objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDto"][];
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
                /** @description The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description A valid user object */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edits the given user */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid user id */
                    userId: number;
                };
                cookie?: never;
            };
            /** @description A valid user object */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes the given user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid user id */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the assigned permissions of the given user
         * @description See "GET /objects/permission_hierarchy" for a permission name / id mapping
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid user id */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of user permission objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            permission_id?: number;
                            user_id?: number;
                        }[];
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        /**
         * Replaces the assigned permissions of the given user
         * @description See "GET /objects/permission_hierarchy" for a permission name / id mapping
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid user id */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A list of permission ids */
                        permissions?: number[];
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        /**
         * Adds a permission to the given user
         * @description See "GET /objects/permission_hierarchy" for a permission name / id mapping
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid user id */
                    userId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A permission ids */
                        permissions_id?: number;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the currently authenticated user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A user object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all settings of the currently logged in user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Key/value pairs of user settings */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/settings/{settingKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the given setting of the currently logged in user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The key of the user setting */
                    settingKey: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A UserSetting object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserSetting"];
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        /** Sets the given setting of the currently logged in user */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The key of the user setting */
                    settingKey: string;
                };
                cookie?: never;
            };
            /** @description A valid UserSetting object */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserSetting"];
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes the given setting of the currently logged in user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The key of the user setting */
                    settingKey: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all products which are currently in stock incl. the next due date per product */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of CurrentStockResponse objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CurrentStockResponse"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/entry/{entryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns details of the given stock */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid stock entry id */
                    entryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A StockEntry Response object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockEntry"];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        /** Edits the stock entry */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid stock entry id */
                    entryId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount to add - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
                        amount?: number;
                        /**
                         * Format: date
                         * @description The due date of the product to add, when omitted, the current date is used
                         */
                        best_before_date?: string;
                        /** @description The price per stock quantity unit in configured currency */
                        price?: number;
                        /** @description If the stock entry was already opened or not */
                        open?: boolean;
                        /** @description If omitted, the default location of the product is used */
                        location_id?: number;
                        /** @description If omitted, no store will be affected */
                        shopping_location_id?: number;
                        /**
                         * Format: date
                         * @description The date when this stock entry was purchased
                         */
                        purchased_date?: string;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, invalid transaction type) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/entry/{entryId}/printlabel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Prints the Grocycode / stock entry label of the given entry on the configured label printer */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid stock entry id */
                    entryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing stock entry, error on WebHook execution) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/volatile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all products which are due soon, overdue, expired or currently missing */
        get: {
            parameters: {
                query?: {
                    /** @description The number of days in which products are considered to be due soon */
                    due_soon_days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A CurrentVolatilStockResponse object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CurrentVolatilStockResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns details of the given product */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A ProductDetailsResponse object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductDetailsResponse"];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all locations where the given product currently has stock */
        get: {
            parameters: {
                query?: {
                    /** @description If sub product locations should be included (if the given product is a parent product and in addition to the ones of the given product) */
                    include_sub_products?: boolean;
                    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
                    "query[]"?: components["parameters"]["query"];
                    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
                    order?: components["parameters"]["order"];
                    /** @description The maximum number of objects to return */
                    limit?: components["parameters"]["limit"];
                    /** @description The number of objects to skip */
                    offset?: components["parameters"]["offset"];
                };
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of StockLocation objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLocation"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
                /** @description The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all stock entries of the given product in order of next use (Opened first, then first due first, then first in first out) */
        get: {
            parameters: {
                query?: {
                    /** @description If sub products should be included (if the given product is a parent product and in addition to the ones of the given product) */
                    include_sub_products?: boolean;
                    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
                    "query[]"?: components["parameters"]["query"];
                    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
                    order?: components["parameters"]["order"];
                    /** @description The maximum number of objects to return */
                    limit?: components["parameters"]["limit"];
                    /** @description The number of objects to skip */
                    offset?: components["parameters"]["offset"];
                };
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of StockEntry objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
                /** @description The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}/price-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the price history of the given product */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of ProductPriceHistory objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductPriceHistory"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds the given amount of the given product to stock */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount to add - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
                        amount?: number;
                        /**
                         * Format: date
                         * @description The due date of the product to add, when omitted, the current date is used
                         */
                        best_before_date?: string;
                        transaction_type?: components["schemas"]["StockTransactionType"];
                        /** @description The price per stock quantity unit in configured currency */
                        price?: number;
                        /** @description If omitted, the default location of the product is used */
                        location_id?: number;
                        /** @description If omitted, no store will be affected */
                        shopping_location_id?: number;
                        /** @description `1` = No label, `2` = Single label, `3` = Label per unit */
                        stock_label_type?: number;
                        /** @description An optional note for the corresponding stock entry */
                        note?: string;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, invalid transaction type) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}/consume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Removes the given amount of the given product from stock */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount to remove - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
                        amount?: number;
                        transaction_type?: components["schemas"]["StockTransactionType"];
                        /** @description True when the given product was spoiled, defaults to false */
                        spoiled?: boolean;
                        /** @description A specific stock entry id to consume, if used, the amount has to be 1 */
                        stock_entry_id?: string;
                        /** @description A valid recipe id for which this product was used (for statistical purposes only) */
                        recipe_id?: number;
                        /** @description A valid location id (if supplied, only stock at the given location is considered, if ommitted, stock of any location is considered) */
                        location_id?: number;
                        /** @description For tare weight handling enabled products, `true` when the given is the absolute amount to be consumed, not the amount including the container weight */
                        exact_amount?: boolean;
                        /** @description `true` when any in stock sub product should be used when the given product is a parent product and currently not in stock */
                        allow_subproduct_substitution?: boolean;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, invalid transaction type, given amount > current stock amount) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transfers the given amount of the given product from one location to another (this is currently not supported for tare weight handling enabled products) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount to transfer - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
                        amount?: number;
                        /** @description A valid location id, the location from where the product should be transfered */
                        location_id_from?: number;
                        /** @description A valid location id, the location to where the product should be transfered */
                        location_id_to?: number;
                        /** @description A specific stock entry id to transfer, if used, the amount has to be 1 */
                        stock_entry_id?: string;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, no existing from or to location, given amount > current stock amount at the source location) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inventories the given product (adds/removes based on the given new amount) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The new current amount for the given product - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
                        new_amount?: number;
                        /**
                         * Format: date
                         * @description The due date which applies to added products
                         */
                        best_before_date?: string;
                        /** @description If omitted, no store will be affected */
                        shopping_location_id?: number;
                        /** @description If omitted, the default location of the product is used (only applies to added products) */
                        location_id?: number;
                        /** @description If omitted, the last price of the product is used (only applies to added products) */
                        price?: number;
                        /** @description `1` = No label, `2` = Single label, `3` = Label per unit (only applies to added products) */
                        stock_label_type?: number;
                        /** @description An optional note for the corresponding stock entry (only applies to added products) */
                        note?: string;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}/open": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Marks the given amount of the given product as opened */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount to mark as opened */
                        amount?: number;
                        /** @description A specific stock entry id to open, if used, the amount has to be 1 */
                        stock_entry_id?: string;
                        /** @description `true` when any in stock sub product should be used when the given product is a parent product and currently not in stock */
                        allow_subproduct_substitution?: boolean;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, given amount > current unopened stock amount) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productId}/printlabel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Prints the Grocycode label of the given product on the configured label printer */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid product id */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, error on WebHook execution) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/{productIdToKeep}/merge/{productIdToRemove}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Merges two products into one */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid product id of the product to keep */
                    productIdToKeep: number;
                    /** @description A valid product id of the product to remove */
                    productIdToRemove: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Invalid product id) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/by-barcode/{barcode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns details of the given product by its barcode */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Barcode */
                    barcode: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A ProductDetailsResponse object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductDetailsResponse"];
                    };
                };
                /** @description The operation was not successful (possible errors are: Unknown barcode) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/by-barcode/{barcode}/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds the given amount of the by its barcode given product to stock */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Barcode */
                    barcode: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount to add - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
                        amount?: number;
                        /**
                         * Format: date
                         * @description The due date of the product to add, when omitted, the current date is used
                         */
                        best_before_date?: string;
                        transaction_type?: components["schemas"]["StockTransactionType"];
                        /** @description The price per stock quantity unit in configured currency */
                        price?: number;
                        /** @description If omitted, the default location of the product is used */
                        location_id?: number;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, invalid transaction type) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/by-barcode/{barcode}/consume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Removes the given amount of the by its barcode given product from stock */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Barcode */
                    barcode: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount to remove - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
                        amount?: number;
                        transaction_type?: components["schemas"]["StockTransactionType"];
                        /** @description True when the given product was spoiled, defaults to false */
                        spoiled?: boolean;
                        /** @description A specific stock entry id to consume, if used, the amount has to be 1 */
                        stock_entry_id?: string;
                        /** @description A valid recipe id for which this product was used (for statistical purposes only) */
                        recipe_id?: number;
                        /** @description A valid location id (if supplied, only stock at the given location is considered, if ommitted, stock of any location is considered) */
                        location_id?: number;
                        /** @description For tare weight handling enabled products, `true` when the given is the absolute amount to be consumed, not the amount including the container weight */
                        exact_amount?: boolean;
                        /** @description `rue` when any in stock sub product should be used when the given product is a parent product and currently not in stock */
                        allow_subproduct_substitution?: boolean;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, invalid transaction type, given amount > current stock amount) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/by-barcode/{barcode}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transfers the given amount of the by its barcode given product from one location to another (this is currently not supported for tare weight handling enabled products) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Barcode */
                    barcode: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount to transfer - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
                        amount?: number;
                        /** @description A valid location id, the location from where the product should be transfered */
                        location_id_from?: number;
                        /** @description A valid location id, the location to where the product should be transfered */
                        location_id_to?: number;
                        /** @description A specific stock entry id to transfer, if used, the amount has to be 1 */
                        stock_entry_id?: string;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, no existing from or to location, given amount > current stock amount at the source location) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/by-barcode/{barcode}/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Inventories the by its barcode given product (adds/removes based on the given new amount) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Barcode */
                    barcode: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The new current amount for the given product - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
                        new_amount?: number;
                        /**
                         * Format: date
                         * @description The due date which applies to added products
                         */
                        best_before_date?: string;
                        /** @description If omitted, the default location of the product is used (only applies to added products) */
                        location_id?: number;
                        /** @description If omitted, the last price of the product is used (only applies to added products) */
                        price?: number;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/products/by-barcode/{barcode}/open": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Marks the given amount of the by its barcode given product as opened */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Barcode */
                    barcode: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The amount to mark as opened */
                        amount?: number;
                        /** @description A specific stock entry id to open, if used, the amount has to be 1 */
                        stock_entry_id?: string;
                        /** @description `rue` when any in stock sub product should be used when the given product is a parent product and currently not in stock */
                        allow_subproduct_substitution?: boolean;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing product, given amount > current unopened stock amount) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/locations/{locationId}/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all stock entries of the given location */
        get: {
            parameters: {
                query?: {
                    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
                    "query[]"?: components["parameters"]["query"];
                    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
                    order?: components["parameters"]["order"];
                    /** @description The maximum number of objects to return */
                    limit?: components["parameters"]["limit"];
                    /** @description The number of objects to skip */
                    offset?: components["parameters"]["offset"];
                };
                header?: never;
                path: {
                    /** @description A valid location id */
                    locationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of StockEntry objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing location) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
                /** @description The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/shoppinglist/add-missing-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds currently missing products (below defined min. stock amount) to the given shopping list */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The shopping list to use, when omitted, the default shopping list (with id 1) is used */
                        list_id?: number;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing shopping list) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/shoppinglist/add-overdue-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds overdue products to the given shopping list */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The shopping list to use, when omitted, the default shopping list (with id 1) is used */
                        list_id?: number;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing shopping list) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/shoppinglist/add-expired-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds expired products to the given shopping list */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The shopping list to use, when omitted, the default shopping list (with id 1) is used */
                        list_id?: number;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing shopping list) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/shoppinglist/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Removes all items from the given shopping list */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The shopping list id to clear, when omitted, the default shopping list (with id 1) is used */
                        list_id?: number;
                        /** @description When `true`, only done items will be removed (defaults to `false` when ommited) */
                        done_only?: boolean;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing shopping list) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/shoppinglist/add-product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Adds the given amount of the given product to the given shopping list
         * @description If the product is already on the shopping list, the given amount will increase the amount of the already existing item, otherwise a new item will be added
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A valid product id of the product to be added */
                        product_id?: number;
                        /** @description A valid quantity unit id (used only for display; the amount needs to be related to the products stock QU), when omitted, the products stock QU is used */
                        qu_id?: number;
                        /** @description A valid shopping list id, when omitted, the default shopping list (with id 1) is used */
                        list_id?: number;
                        /** @description The amount (related to the products stock QU) to add, when omitted, the default amount of 1 is used */
                        product_amount?: number;
                        /** @description The note of the shopping list item */
                        note?: string;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing shopping list, Invalid product id supplied) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/shoppinglist/remove-product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Removes the given amount of the given product from the given shopping list, if it is on it
         * @description If the resulting amount is <= 0, the item will be completely removed from the given list, otherwise the given amount will reduce the amount of the existing item
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A valid product id of the item on the shopping list */
                        product_id?: number;
                        /** @description A valid shopping list id, when omitted, the default shopping list (with id 1) is used */
                        list_id?: number;
                        /** @description The amount of product units to remove, when omitted, the default amount of 1 is used */
                        product_amount?: number;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing shopping list, Invalid product id supplied) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/bookings/{bookingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the given stock booking */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid stock booking id */
                    bookingId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A StockLogEntry object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"];
                    };
                };
                /** @description The operation was not successful (possible errors are: Invalid stock booking id) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/bookings/{bookingId}/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Undoes a booking */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid stock booking id */
                    bookingId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing booking) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/transactions/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all stock bookings of the given transaction id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid stock transaction id */
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of StockLogEntry objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockLogEntry"][];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing transaction) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/transactions/{transactionId}/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Undoes a transaction */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid stock transaction id */
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing transaction) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stock/barcodes/external-lookup/{barcode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Executes an external barcode lookoup via the configured plugin with the given barcode */
        get: {
            parameters: {
                query?: {
                    /** @description When true, the product is added to the database on a successful lookup and the new product id is in included in the response */
                    add?: boolean;
                };
                header?: never;
                path: {
                    /** @description The barcode to lookup up */
                    barcode: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An ExternalBarcodeLookupResponse object or null, when nothing was found for the given barcode */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExternalBarcodeLookupResponse"];
                    };
                };
                /** @description The operation was not successful (possible errors are: Plugin error) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{recipeId}/add-not-fulfilled-products-to-shoppinglist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds all missing products for the given recipe to the shopping list */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid recipe id */
                    recipeId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description An optional array of product ids to exclude them from being put on the shopping list */
                        excludedProductIds?: number[];
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{recipeId}/fulfillment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get stock fulfillment information for the given recipe */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid recipe id */
                    recipeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A RecipeFulfillmentResponse object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RecipeFulfillmentResponse"];
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{recipeId}/consume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Consumes all in stock ingredients of the given recipe (for ingredients that are only partially in stock, the in stock amount will be consumed) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid recipe id */
                    recipeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Invalid recipe id, recipe need is not fulfilled) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/fulfillment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get stock fulfillment information for all recipe */
        get: {
            parameters: {
                query?: {
                    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
                    "query[]"?: components["parameters"]["query"];
                    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
                    order?: components["parameters"]["order"];
                    /** @description The maximum number of objects to return */
                    limit?: components["parameters"]["limit"];
                    /** @description The number of objects to skip */
                    offset?: components["parameters"]["offset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of RecipeFulfillmentResponse objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RecipeFulfillmentResponse"][];
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
                /** @description The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{recipeId}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Copies a recipe */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid recipe id of the recipe to copy */
                    recipeId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The id of the created recipe */
                            created_object_id?: number;
                        };
                    };
                };
                /** @description The operation was not successful (possible errors are: Invalid recipe id) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{recipeId}/printlabel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Prints the Grocycode label of the given recipe on the configured label printer */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid recipe id */
                    recipeId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing recipe, error on WebHook execution) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all chores incl. the next estimated execution time per chore */
        get: {
            parameters: {
                query?: {
                    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
                    "query[]"?: components["parameters"]["query"];
                    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
                    order?: components["parameters"]["order"];
                    /** @description The maximum number of objects to return */
                    limit?: components["parameters"]["limit"];
                    /** @description The number of objects to skip */
                    offset?: components["parameters"]["offset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of CurrentChoreResponse objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CurrentChoreResponse"][];
                    };
                };
                /** @description The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chores/{choreId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns details of the given chore */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid chore id */
                    choreId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A ChoreDetailsResponse object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChoreDetailsResponse"];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing chore) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chores/{choreId}/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Tracks an execution of the given chore */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid chore id */
                    choreId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: date-time
                         * @description The time of when the chore was executed, when omitted, the current time is used
                         */
                        tracked_time?: string;
                        /** @description A valid user id of who executed this chore, when omitted, the currently authenticated user will be used */
                        done_by?: number;
                        /**
                         * @description `true` when the execution should be tracked as skipped, defaults to `false` when omitted
                         * @default false
                         */
                        skipped?: boolean;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChoreLogEntry"];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing chore) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chores/executions/{executionId}/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Undoes a chore execution */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid chore execution id */
                    executionId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing booking) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chores/executions/calculate-next-assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** (Re)calculates all next user assignments of all chores */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The chore id of the chore which next user assignment should be (re)calculated, when omitted, the next user assignments of all chores will (re)caluclated */
                        chore_id?: number;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chores/{choreId}/printlabel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Prints the Grocycode label of the given chore on the configured label printer */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid chore id */
                    choreId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing chore, error on WebHook execution) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chores/{choreIdToKeep}/merge/{choreIdToRemove}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Merges two chores into one */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid chore id of the chore to keep */
                    choreIdToKeep: number;
                    /** @description A valid chore id of the chore to remove */
                    choreIdToRemove: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Invalid chore id) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batteries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all batteries incl. the next estimated charge time per battery */
        get: {
            parameters: {
                query?: {
                    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
                    "query[]"?: components["parameters"]["query"];
                    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
                    order?: components["parameters"]["order"];
                    /** @description The maximum number of objects to return */
                    limit?: components["parameters"]["limit"];
                    /** @description The number of objects to skip */
                    offset?: components["parameters"]["offset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of CurrentBatteryResponse objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CurrentBatteryResponse"][];
                    };
                };
                /** @description The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batteries/{batteryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns details of the given battery */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid battery id */
                    batteryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A BatteryDetailsResponse object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BatteryDetailsResponse"];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing battery) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batteries/{batteryId}/charge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Tracks a charge cycle of the given battery */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid battery id */
                    batteryId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: date-time
                         * @description The time of when the battery was charged, when omitted, the current time is used
                         */
                        tracked_time?: string;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BatteryChargeCycleEntry"];
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing battery) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batteries/charge-cycles/{chargeCycleId}/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Undoes a battery charge cycle */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid charge cycle id */
                    chargeCycleId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing booking) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batteries/{batteryId}/printlabel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Prints the Grocycode label of the given battery on the configured label printer */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid battery id */
                    batteryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The operation was not successful (possible errors are: Not existing battery, error on WebHook execution) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all tasks which are not done yet */
        get: {
            parameters: {
                query?: {
                    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
                    "query[]"?: components["parameters"]["query"];
                    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
                    order?: components["parameters"]["order"];
                    /** @description The maximum number of objects to return */
                    limit?: components["parameters"]["limit"];
                    /** @description The number of objects to skip */
                    offset?: components["parameters"]["offset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An array of CurrentTaskResponse objects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CurrentTaskResponse"][];
                    };
                };
                /** @description The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{taskId}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Marks the given task as completed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid task id */
                    taskId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: date-time
                         * @description The time of when the task was completed, when omitted, the current time is used
                         */
                        done_time?: string;
                    };
                };
            };
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing task) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{taskId}/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Marks the given task as not completed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description A valid task id */
                    taskId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The operation was successful */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The operation was not successful (possible errors are: Not existing task) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/ical": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the calendar in iCal format */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The iCal file contents */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/calendar": string;
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar/ical/sharing-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a (public) sharing link for the calendar in iCal format */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The (public) sharing link for the calendar in iCal format */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            url?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/print/shoppinglist/thermal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Prints the shoppinglist with a thermal printer */
        get: {
            parameters: {
                query?: {
                    /** @description Shopping list id */
                    list?: number;
                    /** @description Prints Grocy logo if true */
                    printHeader?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns OK if the printing was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: string;
                        };
                    };
                };
                /** @description The operation was not successful */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "id": "1",
         *       "name": "Cookies",
         *       "description": null,
         *       "location_id": "4",
         *       "qu_id_purchase": "3",
         *       "qu_id_stock": "3",
         *       "min_stock_amount": "8",
         *       "default_best_before_days": "0",
         *       "row_created_timestamp": "2019-05-02 20:12:26",
         *       "product_group_id": "1",
         *       "picture_file_name": "cookies.jpg",
         *       "default_best_before_days_after_open": "0",
         *       "enable_tare_weight_handling": "0",
         *       "tare_weight": "0.0",
         *       "not_check_stock_fulfillment_for_recipes": "0",
         *       "shopping_location_id": null,
         *       "userfields": null,
         *       "should_not_be_frozen": "1",
         *       "default_consume_location_id": "5",
         *       "move_on_open": "1"
         *     } */
        Product: {
            id?: number;
            name?: string;
            description?: string;
            location_id?: number;
            qu_id_purchase?: number;
            qu_id_stock?: number;
            enable_tare_weight_handling?: number;
            not_check_stock_fulfillment_for_recipes?: number;
            product_group_id?: number;
            tare_weight?: number;
            /** @default 0 */
            min_stock_amount: number;
            /** @default 0 */
            default_best_before_days: number;
            /** @default 0 */
            default_best_before_days_after_open: number;
            picture_file_name?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
            shopping_location_id?: number;
            treat_opened_as_out_of_stock?: number;
            auto_reprint_stock_label?: number;
            no_own_stock?: number;
            /** @description Key/value pairs of userfields */
            userfields?: Record<string, never>;
            should_not_be_frozen?: number;
            default_consume_location_id?: number;
            move_on_open?: number;
        };
        /** @example {
         *       "id": "1",
         *       "name": "Cookies",
         *       "description": null,
         *       "location_id": "4",
         *       "qu_id_purchase": "3",
         *       "qu_id_stock": "3",
         *       "min_stock_amount": "8",
         *       "default_best_before_days": "0",
         *       "row_created_timestamp": "2019-05-02 20:12:26",
         *       "product_group_id": "1",
         *       "picture_file_name": "cookies.jpg",
         *       "default_best_before_days_after_open": "0",
         *       "enable_tare_weight_handling": "0",
         *       "tare_weight": "0.0",
         *       "not_check_stock_fulfillment_for_recipes": "0",
         *       "shopping_location_id": null,
         *       "userfields": null,
         *       "should_not_be_frozen": "1",
         *       "default_consume_location_id": "5",
         *       "move_on_open": "1"
         *     } */
        ProductWithoutUserfields: {
            id?: number;
            name?: string;
            description?: string;
            location_id?: number;
            qu_id_purchase?: number;
            qu_id_stock?: number;
            enable_tare_weight_handling?: number;
            not_check_stock_fulfillment_for_recipes?: number;
            product_group_id?: number;
            tare_weight?: number;
            /** @default 0 */
            min_stock_amount: number;
            /** @default 0 */
            default_best_before_days: number;
            /** @default 0 */
            default_best_before_days_after_open: number;
            picture_file_name?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
            shopping_location_id?: number;
            treat_opened_as_out_of_stock?: number;
            auto_reprint_stock_label?: number;
            no_own_stock?: number;
            should_not_be_frozen?: number;
            default_consume_location_id?: number;
            move_on_open?: number;
        };
        /** @example {
         *       "id": "2",
         *       "name": "Piece",
         *       "description": null,
         *       "row_created_timestamp": "2019-05-02 20:12:25",
         *       "name_plural": "Pieces",
         *       "plural_forms": null,
         *       "userfields": null
         *     } */
        QuantityUnit: {
            id?: number;
            name?: string;
            name_plural?: string;
            description?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
            plural_forms?: string;
            /** @description Key/value pairs of userfields */
            userfields?: Record<string, never>;
        };
        /** @example {
         *       "id": "2",
         *       "name": "0",
         *       "description": null,
         *       "row_created_timestamp": "2019-05-02 20:12:25",
         *       "userfields": null
         *     } */
        Location: {
            id?: number;
            name?: string;
            description?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
            /** @description Key/value pairs of userfields */
            userfields?: Record<string, never>;
        };
        /** @example {
         *       "id": "2",
         *       "name": "0",
         *       "description": null,
         *       "row_created_timestamp": "2019-05-02 20:12:25",
         *       "userfields": null
         *     } */
        ShoppingLocation: {
            id?: number;
            name?: string;
            description?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
            /** @description Key/value pairs of userfields */
            userfields?: Record<string, never>;
        };
        /** @example {
         *       "id": "1",
         *       "product_id": "3",
         *       "amount": "2",
         *       "location_id": "1",
         *       "name": "Fridge"
         *     } */
        StockLocation: {
            id?: number;
            product_id?: number;
            amount?: number;
            location_id?: number;
            location_name?: string;
            location_is_freezer?: number;
        };
        /** @example {
         *       "id": "77",
         *       "product_id": "1",
         *       "amount": "2",
         *       "best_before_date": "2019-07-07",
         *       "purchased_date": "2019-05-03",
         *       "stock_id": "5ccc6b2421979",
         *       "price": null,
         *       "open": "0",
         *       "opened_date": null,
         *       "row_created_timestamp": "2019-05-03 18:24:04",
         *       "location_id": "4",
         *       "shopping_location_id": null
         *     } */
        StockEntry: {
            id?: number;
            product_id?: number;
            location_id?: number;
            shopping_location_id?: number;
            amount?: number;
            /** Format: date */
            best_before_date?: string;
            /** Format: date */
            purchased_date?: string;
            /** @description A unique id which references this stock entry during its lifetime */
            stock_id?: string;
            price?: number;
            open?: number;
            /** Format: date */
            opened_date?: string;
            note?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        /** @example {
         *       "recipe_id": "1",
         *       "need_fulfilled": "0",
         *       "need_fulfilled_with_shopping_list": "0",
         *       "missing_products_count": "2",
         *       "costs": "17.74"
         *     } */
        RecipeFulfillmentResponse: {
            recipe_id?: number;
            need_fulfilled?: boolean;
            need_fulfilled_with_shopping_list?: boolean;
            missing_products_count?: number;
            costs?: number;
        };
        /** @example {
         *       "product": {
         *         "id": "1",
         *         "name": "Cookies",
         *         "description": null,
         *         "location_id": "4",
         *         "qu_id_purchase": "3",
         *         "qu_id_stock": "3",
         *         "min_stock_amount": "8",
         *         "default_best_before_days": "0",
         *         "row_created_timestamp": "2019-05-02 20:12:26",
         *         "product_group_id": "1",
         *         "picture_file_name": "cookies.jpg",
         *         "default_best_before_days_after_open": "0",
         *         "enable_tare_weight_handling": "0",
         *         "tare_weight": "0.0",
         *         "not_check_stock_fulfillment_for_recipes": "0",
         *         "last_shopping_location_id": null
         *       },
         *       "product_barcodes": [
         *         {
         *           "id": "1",
         *           "product_id": "13",
         *           "barcode": "01321230213",
         *           "qu_id": "1",
         *           "shopping_location_id": "2",
         *           "amount": "10"
         *         }
         *       ],
         *       "last_purchased": null,
         *       "last_used": null,
         *       "stock_amount": "2",
         *       "stock_amount_opened": null,
         *       "default_quantity_unit_purchase": {
         *         "id": "3",
         *         "name": "Pack",
         *         "description": null,
         *         "row_created_timestamp": "2019-05-02 20:12:25",
         *         "name_plural": "Packs",
         *         "plural_forms": null
         *       },
         *       "quantity_unit_stock": {
         *         "id": "3",
         *         "name": "Pack",
         *         "description": null,
         *         "row_created_timestamp": "2019-05-02 20:12:25",
         *         "name_plural": "Packs",
         *         "plural_forms": null
         *       },
         *       "quantity_unit_price": {
         *         "id": "3",
         *         "name": "Pack",
         *         "description": null,
         *         "row_created_timestamp": "2019-05-02 20:12:25",
         *         "name_plural": "Packs",
         *         "plural_forms": null
         *       },
         *       "last_price": null,
         *       "avg_price": null,
         *       "current_price": null,
         *       "last_shopping_location_id": null,
         *       "next_due_date": "2019-07-07",
         *       "location": {
         *         "id": "4",
         *         "name": "Candy cupboard",
         *         "description": null,
         *         "row_created_timestamp": "2019-05-02 20:12:25"
         *       },
         *       "average_shelf_life_days": -1,
         *       "spoil_rate_percent": 0,
         *       "default_consume_location": null
         *     } */
        ProductDetailsResponse: {
            product?: components["schemas"]["Product"];
            product_barcodes?: components["schemas"]["ProductBarcode"][];
            quantity_unit_stock?: components["schemas"]["QuantityUnit"];
            default_quantity_unit_purchase?: components["schemas"]["QuantityUnit"];
            default_quantity_unit_consume?: components["schemas"]["QuantityUnit"];
            quantity_unit_price?: components["schemas"]["QuantityUnit"];
            /** Format: date */
            last_purchased?: string;
            /** Format: date */
            last_used?: string;
            stock_amount?: number;
            stock_amount_opened?: number;
            /** Format: date */
            next_due_date?: string;
            /** @description The price of the last purchase of the corresponding product */
            last_price?: number;
            /** @description The average price af all stock entries currently in stock of the corresponding product */
            avg_price?: number;
            /** @description The current price of the corresponding product, based on the stock entry to use next (defined by the default consume rule "Opened first, then first due first, then first in first out") or on the last price if the product is currently not in stock */
            current_price?: number;
            /**
             * @deprecated
             * @description This field is deprecated and will be removed in a future version (currently returns the same as `current_price`)
             */
            oldest_price?: number;
            last_shopping_location_id?: number;
            location?: components["schemas"]["Location"];
            average_shelf_life_days?: number;
            spoil_rate_percent?: number;
            /** @description True when the product is a parent product of others */
            has_childs?: boolean;
            default_location?: components["schemas"]["Location"];
            /** @description The conversion factor of the corresponding QU conversion from the product's qu_id_purchase to qu_id_stock */
            qu_conversion_factor_purchase_to_stock?: number;
            /** @description The conversion factor of the corresponding QU conversion from the product's qu_id_price to qu_id_stock */
            qu_conversion_factor_price_to_stock?: number;
        };
        ProductPriceHistory: {
            /** Format: date-time */
            date?: string;
            price?: number;
            shopping_location?: components["schemas"]["ShoppingLocation"];
        };
        ProductBarcode: {
            product_id?: number;
            barcode?: string;
            qu_id?: number;
            shopping_location_id?: number;
            amount?: number;
            last_price?: number;
            note?: string;
        };
        ExternalBarcodeLookupResponse: {
            name?: string;
            location_id?: number;
            qu_id_purchase?: number;
            qu_id_stock?: number;
            qu_factor_purchase_to_stock?: number;
            /** @description Can contain multiple barcodes separated by comma */
            barcode?: string;
            /** @description The id of the added product, only included when the producted was added to the database */
            id?: number;
        };
        /** @example {
         *       "chore": {
         *         "id": 0,
         *         "name": "string",
         *         "description": "string",
         *         "period_type": "manually",
         *         "period_days": 0,
         *         "row_created_timestamp": "2019-05-04T11:31:04.563Z"
         *       },
         *       "last_tracked": "2019-05-04T11:31:04.563Z",
         *       "track_count": 0,
         *       "last_done_by": {
         *         "id": 0,
         *         "username": "string",
         *         "first_name": "string",
         *         "last_name": "string",
         *         "display_name": "string",
         *         "row_created_timestamp": "2019-05-04T11:31:04.564Z"
         *       },
         *       "next_estimated_execution_time": "2019-05-04T11:31:04.564Z"
         *     } */
        ChoreDetailsResponse: {
            chore?: components["schemas"]["Chore"];
            /**
             * Format: date-time
             * @description When this chore was last tracked
             */
            last_tracked?: string;
            /** @description How often this chore was tracked so far */
            track_count?: number;
            last_done_by?: components["schemas"]["UserDto"];
            /** Format: date-time */
            next_estimated_execution_time?: string;
            next_execution_assigned_user?: components["schemas"]["UserDto"];
            /** @description Contains the average past execution frequency in hours or `null`, when the chore was never executed before */
            average_execution_frequency_hours?: number;
        };
        /** @example {
         *       "battery": {
         *         "id": "1",
         *         "name": "Battery1",
         *         "description": "Warranty ends 2023",
         *         "used_in": "TV remote control",
         *         "charge_interval_days": "0",
         *         "row_created_timestamp": "2019-05-02 20:12:26"
         *       },
         *       "last_charged": "2019-03-13 18:12:28",
         *       "charge_cycles_count": 4,
         *       "next_estimated_charge_time": "2999-12-31 23:59:59"
         *     } */
        BatteryDetailsResponse: {
            chore?: components["schemas"]["Battery"];
            /**
             * Format: date-time
             * @description When this battery was last charged
             */
            last_charged?: string;
            /** @description How often this battery was charged so far */
            charge_cycles_count?: number;
            /** Format: date-time */
            next_estimated_charge_time?: string;
        };
        Session: {
            id?: number;
            session_key?: string;
            /** Format: date-time */
            expires?: string;
            /** Format: date-time */
            last_used?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        User: {
            id?: number;
            username?: string;
            first_name?: string;
            last_name?: string;
            password?: string;
            picture_file_name?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        /** @description A user object without the *password* and with an additional *display_name* property */
        UserDto: {
            id?: number;
            username?: string;
            first_name?: string;
            last_name?: string;
            display_name?: string;
            picture_file_name?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        ApiKey: {
            id?: number;
            api_key?: string;
            /** Format: date-time */
            expires?: string;
            /** Format: date-time */
            last_used?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        ShoppingListItem: {
            id?: number;
            shopping_list_id?: number;
            product_id?: number;
            note?: string;
            /**
             * @description The manual entered amount
             * @default 0
             */
            amount: number;
            /** Format: date-time */
            row_created_timestamp?: string;
            /** @description Key/value pairs of userfields */
            userfields?: Record<string, never>;
        };
        Battery: {
            id?: number;
            name?: string;
            description?: string;
            used_in?: string;
            /** @default 0 */
            charge_interval_days: number;
            /** Format: date-time */
            row_created_timestamp?: string;
            /** @description Key/value pairs of userfields */
            userfields?: Record<string, never>;
        };
        BatteryChargeCycleEntry: {
            id?: number;
            battery_id?: number;
            /** Format: date-time */
            tracked_time?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        Chore: {
            id?: number;
            name?: string;
            description?: string;
            /** @enum {string} */
            period_type?: "manually" | "hourly" | "daily" | "weekly" | "monthly";
            period_config?: string;
            period_days?: number;
            track_date_only?: boolean;
            rollover?: boolean;
            /** @enum {string} */
            assignment_type?: "no-assignment" | "who-least-did-first" | "random" | "in-alphabetical-order";
            assignment_config?: string;
            next_execution_assigned_to_user_id?: number;
            /** Format: date-time */
            start_date?: string;
            /** Format: date-time */
            rescheduled_date?: string;
            rescheduled_next_execution_assigned_to_user_id?: number;
            /** Format: date-time */
            row_created_timestamp?: string;
            /** @description Key/value pairs of userfields */
            userfields?: Record<string, never>;
        };
        ChoreLogEntry: {
            id?: number;
            chore_id?: number;
            /** Format: date-time */
            tracked_time?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        StockLogEntry: {
            id?: number;
            product_id?: number;
            amount?: number;
            /** Format: date */
            best_before_date?: string;
            /** Format: date */
            purchased_date?: string;
            /** Format: date */
            used_date?: string;
            /** @default false */
            spoiled: boolean;
            stock_id?: string;
            transaction_id?: string;
            transaction_type?: components["schemas"]["StockTransactionType"];
            note?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        /** @example {
         *       "id": "1",
         *       "correlation_id": null,
         *       "undone": "0",
         *       "undone_timestamp": null,
         *       "transaction_type": "purchase",
         *       "spoiled": "0",
         *       "amount": "1",
         *       "location_id": "4",
         *       "location_name": "Candy cupboard",
         *       "product_name": "Gummy bears",
         *       "qu_name": "Pack",
         *       "qu_name_plural": "Packs",
         *       "user_display_name": "Demo User",
         *       "row_created_timestamp": "2020-11-14 16:42:21"
         *     } */
        StockJournal: {
            correlation_id?: string;
            undone?: number;
            /** Format: date-time */
            undone_timestamp?: string;
            amount?: number;
            location_id?: number;
            location_name?: string;
            product_name?: string;
            qu_name?: string;
            qu_name_plural?: string;
            user_display_name?: string;
            /** @default false */
            spoiled: boolean;
            transaction_type?: components["schemas"]["StockTransactionType"];
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        /** @example {
         *       "id": "1",
         *       "user_id": "1",
         *       "user_display_name": "Demo User",
         *       "product_name": "Chocolate",
         *       "product_id": "2",
         *       "transaction_type": "purchase",
         *       "qu_name": "Pack",
         *       "qu_name_plural": "Packs",
         *       "amount": "1"
         *     } */
        StockJournalSummary: {
            amount?: number;
            user_id?: number;
            product_name?: string;
            product_id?: number;
            qu_name?: string;
            qu_name_plural?: string;
            user_display_name?: string;
            transaction_type?: components["schemas"]["StockTransactionType"];
        };
        /** @example {
         *       "error_message": "The error message..."
         *     } */
        Error400: {
            error_message?: string;
        };
        /** @example {
         *       "error_message": "The error message..."
         *     } */
        Error500: {
            error_message?: string;
            error_details?: {
                stack_trace?: string;
                file?: string;
                line?: number;
            };
        };
        CurrentStockResponse: {
            product_id?: number;
            amount?: number;
            amount_aggregated?: number;
            amount_opened?: number;
            amount_opened_aggregated?: number;
            /**
             * Format: date
             * @description The next due date for this product
             */
            best_before_date?: string;
            /** @description Indicates wheter this product has sub-products or not / if the fields `amount_aggregated` and `amount_opened_aggregated` are filled */
            is_aggregated_amount?: boolean;
            product?: components["schemas"]["ProductWithoutUserfields"];
        };
        CurrentChoreResponse: {
            chore_id?: number;
            chore_name?: string;
            /** Format: date-time */
            last_tracked_time?: string;
            track_date_only?: boolean;
            /**
             * Format: date-time
             * @description The next estimated execution time of this chore, 2999-12-31 23:59:59 when the given chore has a period_type of manually
             */
            next_estimated_execution_time?: string;
            next_execution_assigned_to_user_id?: number;
            is_rescheduled?: boolean;
            is_reassigned?: boolean;
            next_execution_assigned_user?: components["schemas"]["UserDto"];
        };
        CurrentBatteryResponse: {
            battery_id?: number;
            /** Format: date-time */
            last_tracked_time?: string;
            /**
             * Format: date-time
             * @description The next estimated charge time of this battery, 2999-12-31 23:59:59 when the given battery has no charge_interval_days defined
             */
            next_estimated_charge_time?: string;
        };
        CurrentVolatilStockResponse: {
            due_products?: components["schemas"]["CurrentStockResponse"][];
            overdue_products?: components["schemas"]["CurrentStockResponse"][];
            expired_products?: components["schemas"]["CurrentStockResponse"][];
            missing_products?: {
                id?: number;
                name?: string;
                amount_missing?: number;
                is_partly_in_stock?: number;
            }[];
        };
        Task: {
            id?: number;
            name?: string;
            description?: string;
            /** Format: date-time */
            due_date?: string;
            done?: number;
            /** Format: date-time */
            done_timestamp?: string;
            category_id?: number;
            assigned_to_user_id?: number;
            /** Format: date-time */
            row_created_timestamp?: string;
            /** @description Key/value pairs of userfields */
            userfields?: Record<string, never>;
        };
        TaskCategory: {
            id?: number;
            name?: string;
            description?: string;
            /** Format: date-time */
            row_created_timestamp?: string;
        };
        CurrentTaskResponse: {
            id?: number;
            name?: string;
            description?: string;
            /** Format: date-time */
            due_date?: string;
            done?: number;
            /** Format: date-time */
            done_timestamp?: string;
            category_id?: number;
            assigned_to_user_id?: number;
            /** Format: date-time */
            row_created_timestamp?: string;
            assigned_to_user?: components["schemas"]["UserDto"];
            category?: components["schemas"]["TaskCategory"];
        };
        DbChangedTimeResponse: {
            /** Format: date-time */
            changed_time?: string;
        };
        TimeResponse: {
            timezone?: string;
            /** Format: date-time */
            time_local?: string;
            /** Format: date-time */
            time_local_sqlite3?: string;
            /** Format: date-time */
            time_utc?: string;
            timestamp?: number;
            offset?: number;
        };
        UserSetting: {
            value?: string;
        };
        MissingLocalizationRequest: {
            text?: string;
        };
        /** @enum {string} */
        ExposedEntity: "products" | "chores" | "product_barcodes" | "batteries" | "locations" | "quantity_units" | "quantity_unit_conversions" | "shopping_list" | "shopping_lists" | "shopping_locations" | "recipes" | "recipes_pos" | "recipes_nestings" | "tasks" | "task_categories" | "product_groups" | "equipment" | "api_keys" | "userfields" | "userentities" | "userobjects" | "meal_plan" | "stock_log" | "stock" | "stock_current_locations" | "chores_log" | "meal_plan_sections" | "products_last_purchased" | "products_average_price" | "quantity_unit_conversions_resolved" | "recipes_pos_resolved" | "battery_charge_cycles" | "product_barcodes_view" | "permission_hierarchy";
        /** @enum {string} */
        ExposedEntityNoListing: "api_keys";
        /** @enum {string} */
        ExposedEntityNoEdit: "stock_log" | "api_keys" | "stock" | "stock_current_locations" | "chores_log" | "products_last_purchased" | "products_average_price" | "quantity_unit_conversions_resolved" | "recipes_pos_resolved" | "battery_charge_cycles" | "product_barcodes_view" | "permission_hierarchy";
        /** @enum {string} */
        ExposedEntityNoDelete: "stock_log" | "stock" | "stock_current_locations" | "chores_log" | "products_last_purchased" | "products_average_price" | "quantity_unit_conversions_resolved" | "recipes_pos_resolved" | "battery_charge_cycles" | "product_barcodes_view" | "permission_hierarchy";
        /** @enum {string} */
        ExposedEntityEditRequiresAdmin: never;
        /** @enum {string} */
        StockTransactionType: "purchase" | "consume" | "inventory-correction" | "product-opened";
        /** @enum {string} */
        FileGroups: "equipmentmanuals" | "recipepictures" | "productpictures" | "userfiles" | "userpictures";
        /** @enum {string} */
        StringEnumTemplate: "";
        /** @enum {string} */
        ExposedEntity_IncludingUserEntities: "" | "api_keys" | "batteries" | "battery_charge_cycles" | "chores" | "chores_log" | "equipment" | "locations" | "meal_plan" | "meal_plan_sections" | "permission_hierarchy" | "product_barcodes" | "product_barcodes_view" | "product_groups" | "products" | "products_average_price" | "products_last_purchased" | "quantity_unit_conversions" | "quantity_unit_conversions_resolved" | "quantity_units" | "recipes" | "recipes_nestings" | "recipes_pos" | "recipes_pos_resolved" | "shopping_list" | "shopping_lists" | "shopping_locations" | "stock" | "stock_current_locations" | "stock_log" | "task_categories" | "tasks" | "userentities" | "userentity-exampleuserentity" | "userentity-testing2" | "userfields" | "userobjects" | "users";
        /** @enum {string} */
        ExposedEntity_NotIncludingNotEditable: "" | "batteries" | "chores" | "equipment" | "locations" | "meal_plan" | "meal_plan_sections" | "product_barcodes" | "product_groups" | "products" | "quantity_unit_conversions" | "quantity_units" | "recipes" | "recipes_nestings" | "recipes_pos" | "shopping_list" | "shopping_lists" | "shopping_locations" | "task_categories" | "tasks" | "userentities" | "userfields" | "userobjects";
        /** @enum {string} */
        ExposedEntity_IncludingUserEntities_NotIncludingNotEditable: "" | "" | "batteries" | "chores" | "equipment" | "locations" | "meal_plan" | "meal_plan_sections" | "product_barcodes" | "product_groups" | "products" | "quantity_unit_conversions" | "quantity_units" | "recipes" | "recipes_nestings" | "recipes_pos" | "shopping_list" | "shopping_lists" | "shopping_locations" | "stock" | "task_categories" | "tasks" | "userentities" | "userentity-exampleuserentity" | "userentity-testing2" | "userfields" | "userobjects" | "users";
        /** @enum {string} */
        ExposedEntity_NotIncludingNotDeletable: "" | "api_keys" | "batteries" | "chores" | "equipment" | "locations" | "meal_plan" | "meal_plan_sections" | "product_barcodes" | "product_groups" | "products" | "quantity_unit_conversions" | "quantity_units" | "recipes" | "recipes_nestings" | "recipes_pos" | "shopping_list" | "shopping_lists" | "shopping_locations" | "task_categories" | "tasks" | "userentities" | "userfields" | "userobjects";
        /** @enum {string} */
        ExposedEntity_NotIncludingNotListable: "" | "batteries" | "battery_charge_cycles" | "chores" | "chores_log" | "equipment" | "locations" | "meal_plan" | "meal_plan_sections" | "permission_hierarchy" | "product_barcodes" | "product_barcodes_view" | "product_groups" | "products" | "products_average_price" | "products_last_purchased" | "quantity_unit_conversions" | "quantity_unit_conversions_resolved" | "quantity_units" | "recipes" | "recipes_nestings" | "recipes_pos" | "recipes_pos_resolved" | "shopping_list" | "shopping_lists" | "shopping_locations" | "stock" | "stock_current_locations" | "stock_log" | "task_categories" | "tasks" | "userentities" | "userfields" | "userobjects";
    };
    responses: never;
    parameters: {
        /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
        order: string;
        /** @description The maximum number of objects to return */
        limit: number;
        /** @description The number of objects to skip */
        offset: number;
        /** @description Offset of timestamp in seconds. Can be positive or negative. */
        offsettime: number;
        /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
        query: string[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
